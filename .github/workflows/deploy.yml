kind: pipeline
name: sonar-deploy-ec2

steps:
  # ----------------------------
  # Checkout repository
  # ----------------------------
  - name: Checkout
    image: alpine/git
    commands:
      - git clone ${DRONE_REPO_LINK} .
      - git checkout ${DRONE_BRANCH}

  # ----------------------------
  # Install Python (for Sonar)
  # ----------------------------
  - name: Setup Python
    image: python:3.11
    commands:
      - python --version
      - pip install --upgrade pip

  # ----------------------------
  # SonarQube Scan
  # ----------------------------
  - name: Sonar Scanner
    image: openjdk:17
    commands:
      - curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
      - unzip sonar-scanner.zip -d /tmp
      - export PATH="/tmp/sonar-scanner-5.0.1.3006-linux/bin:$PATH"
      - sonar-scanner \
          -Dsonar.projectKey=sast_scan_test \
          -Dsonar.sources=app \
          -Dsonar.host.url=${SONAR_HOST_URL} \
          -Dsonar.login=${SONAR_TOKEN}

  # ----------------------------
  # Create tarball from repo
  # ----------------------------
  - name: Archive project
    image: alpine:latest
    commands:
      - echo "Creating tarball of app folder and requirements.txt..."
      - tar -zcf /tmp/python-demo.tar.gz -C /drone/src/python-code-test app requirements.txt
      - ls -lh /tmp/python-demo.tar.gz

  # ----------------------------
  # Upload tarball to EC2
  # ----------------------------
  - name: Upload to EC2
    image: appleboy/drone-scp
    settings:
      host: ${EC2_HOST}
      username: ${EC2_USER}
      key: ${EC2_KEY} # private key stored as secret
      port: 22
      source: /tmp/python-demo.tar.gz
      target: /tmp/python-demo/
      debug: true
      strip_prefix: true

  # ----------------------------
  # Deploy app on EC2
  # ----------------------------
  - name: Deploy on EC2
    image: appleboy/drone-ssh
    settings:
      host: ${EC2_HOST}
      username: ${EC2_USER}
      key: ${EC2_KEY}
      port: 22
      script:
        - mkdir -p /tmp/python-demo
        - cd /tmp/python-demo
        - tar -xzf python-demo.tar.gz || echo "⚠ Warning: extraction issues"
        - ls -l
        - sudo yum update -y || echo "⚠ Warning: yum update failed"
        - sudo yum install -y python3 python3-pip || echo "⚠ Warning: python install failed"
        - pip3 install -r requirements.txt || echo "⚠ Warning: some Python packages failed"
        - cd app
        - nohup python3 app.py > app.log 2>&1 &
        - echo "App started. Checking process..."
        - ps aux | grep app.py | grep -v grep
